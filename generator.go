// The following directive is necessary to not compile this file
// along with the rest of the project

// +build ignore

// This file generates the needed Go file with the template concatenated
// with it.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
)

const (
	filename    = "output.tmpl"
	filecontent = `
	// This file is automatically generated when running "go generate" from the project root
	// folder. NEVER edit this file directly, but instead run "go generate" to get a new one
	// based on the template file
	package main
	const httpServerTemplate =`
)

func main() {
	// Open the file and read the contents
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		errexit("Unable to read template file %q: %s", filename, err.Error())
	}

	// Create a buffer to perform concatenation
	var b bytes.Buffer
	b.WriteString(filecontent)
	b.WriteString("`")
	b.Write(bytes.TrimSpace(data))
	b.WriteString("`")

	// Format the resulting Go code to proper Go
	gfmt, err := format.Source(b.Bytes())
	if err != nil {
		errexit("Unable to format generated Go template code: %s", err.Error())
	}

	// Save it to the file
	if err := ioutil.WriteFile("template_gen.go", gfmt, 0644); err != nil {
		errexit("Unable to write the generated template: %s", err.Error())
	}
}

func errexit(format string, params ...interface{}) {
	fmt.Fprintf(os.Stderr, format+"\n", params...)
	os.Exit(2)
}
